pragma solidity ^0.4.0;
contract MissFrance
{
    // V
    address public owner;
    address public winnerMiss;
    mapping(address =>uint8) public voters;
    mapping(address =>uint8) public misses;
    uint missCount;

    address[] misses_list;
    
    // Modifiers
    modifier isowner()
    {
       if(msg.sender!=owner)
        {
           throw;
           _;
        }
    }

    modifier canVote()
    {
        if (voters[msg.sender]==1) 
        {
            throw;
            _;
        }
    }

    // Constructor
    function MissFrance() {
        owner=msg.sender;
        voters[owner]=1;
    }
    
    // Functions
    /**
     * Ajouter les parametres
     * */
    function giveRightToVote(address voter) public {
        voters[voter]=1;
    }
    
    function addVoter(address voter) public {
        voters[voter]=0;
    }
    
    function addMiss(address miss) public {
        misses[miss]=0;
        missCount++;
        misses_list.push(miss);
    }
    
    function vote(address miss) canVote() public {
        voters[msg.sender]--;
        misses[miss]++;
    }
    
    function winner() public {
        address tmp_miss_winner = misses[0] ;
        
        for(uint i=1;i<missCount;i++) {
            if(misses[misses_list[i]] > tmp_miss_winner ) {
                tmp_miss_winner = misses[misses_list[i]];
            }
        }
        winnerMiss=tmp_miss_winner;
    }

    //    
    function kill() isowner() {
        delete owner;
        selfdestruct(msg.sender);
    }
}